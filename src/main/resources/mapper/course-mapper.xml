<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ing.gzq.dao.CourseDao">
    <insert id="insertCourse" parameterType="ing.gzq.model.Course" useGeneratedKeys="true" keyProperty="id"
            keyColumn="id">
        INSERT INTO course (teacherId, name, introduce, `date`)
        VALUES (#{teacherId}, #{name}, #{introduce}, NOW())
    </insert>
    <!--<insert id="insertLesson" parameterType="ing.gzq.model.Notice" useGeneratedKeys="true" keyProperty="id"-->
    <!--keyColumn="id">-->
    <!--INSERT INTO lesson (courseId, introduce, `date`, state)-->
    <!--VALUES (#{courseId},#{introduce},now(),1)-->
    <!--</insert>-->
    <insert id="insertStudentToCourse">
        INSERT INTO course_student
        VALUES (#{courseId}, #{studentId})
    </insert>
    <update id="modifyCourse" parameterType="ing.gzq.model.Course">
        UPDATE course
        SET introduce = #{introduce}
        WHERE id = ${id}
    </update>
    <update id="modifyCourseState">
        UPDATE course
        SET state = #{state}
        WHERE id = #{id}
    </update>
    <delete id="deleteStudent">
        DELETE FROM course_student
        WHERE courseId = #{courseId} AND studentId = #{studentId}
    </delete>
    <!--<update id="updateLessonStateToZero" parameterType="long">-->
    <!--UPDATE lesson-->
    <!--SET state = 0-->
    <!--WHERE id = #{lessonId}-->
    <!--</update>-->
    <select id="getCourseByTeacherId" parameterType="string" resultMap="courseMap">
        SELECT
            `id`,
            teacherId,
            `name`,
            introduce,
            state,
            teacherOnline,
            chat,
            vote,
            `date`
        FROM course
        WHERE teacherId = #{teacherId};
    </select>
    <!--<select id="getLessons" parameterType="string" resultType="ing.gzq.model.Lesson">-->
    <!--SELECT id , courseId , introduce , `date` , state-->
    <!--FROM lesson-->
    <!--WHERE courseId = #{courseId}-->
    <!--</select>-->
    <select id="getCourseByStudentId" parameterType="string" resultMap="courseMap">
        SELECT
            c.id,
            c.teacherId,
            c.name,
            c.introduce,
            c.state,
            c.teacherOnline,
            c.chat,
            c.vote,
            c.date
        FROM course_student cs
            LEFT JOIN course c
                ON cs.courseId = c.id
        WHERE cs.studentId = #{studentId}
    </select>
    <select id="search" resultMap="courseMap" parameterType="string">
        SELECT
            id,
            teacherId,
            `name`,
            introduce,
            state,
            teacherOnline,
            chat,
            vote,
            `date`
        FROM course
        WHERE name LIKE #{regex}
    </select>
    <select id="getStudentsByCourseId" parameterType="long" resultType="ing.gzq.model.StudentInfo">
        SELECT u.username , u.name , u.introduce
        FROM course_student cs
        LEFT JOIN user as u
        ON cs.studentId = u.username
        WHERE cs.courseId = #{courseId}
    </select>
    <resultMap id="courseMap" type="ing.gzq.model.Course">
        <id property="id" column="id"/>
        <result property="teacherId" column="teacherId"/>
        <result property="name" column="name"/>
        <result property="introduce" column="introduce"/>
        <result property="state" column="state"/>
        <result property="teacherOnline" column="teacherOnline"/>
        <result property="chat" column="chat"/>
        <result property="vote" column="vote"/>
        <result property="date" column="date"/>
        <association property="teacherInfo" column="teacherId" select="ing.gzq.dao.UserDao.getTeacherInfo"/>
        <!--<collection property="lessons" column="id" select="ing.gzq.dao.CourseDao.getLessons"/>-->
    </resultMap>
</mapper>